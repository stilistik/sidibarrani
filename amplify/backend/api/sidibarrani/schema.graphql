##########################
# ENUMS
##########################

enum RoundStatus {
  DEAL
  BET
  PLAY
}

enum GameStatus {
  CREATED
  STARTED
  ENDED
}

enum ActionType {
  PLAY
  BET
  SKIP
}

enum RoundMode {
  TOP_DOWN
  BOTTOM_UP
  SLALOM_BOTTOM
  SLALOM_TOP
  TRUMP_D
  TRUMP_H
  TRUMP_C
  TRUMP_S
}

##########################
# MODELS
##########################

type Team
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID
  name: String
  color: String
  TeamUsers: [TeamUser] @connection(keyName: "byTeam", fields: ["id"])
}

type Hand
  @model
  @key(name: "byRound", fields: ["roundID", "userID"])
  @key(name: "byUser", fields: ["userID", "roundID"])
  @auth(rules: [{ allow: owner, ownerField: "userID" }]) {
  id: ID!
  roundID: ID
  userID: ID
  user: User @connection(fields: ["userID"])
  round: Round @connection(fields: ["roundID"])
  cards: [String]
}

type Action
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byStack", fields: ["stackID", "updatedAt"]) {
  id: ID!
  type: ActionType!
  stackID: ID
  userID: ID
  value: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Stack
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byRound", fields: ["roundID", "createdAt"]) {
  id: ID!
  roundID: ID
  size: Int!
  round: Round @connection(fields: ["roundID"])
  actions: [Action] @connection(keyName: "byStack", fields: ["id"])
  winnerID: ID
  winner: TeamUser @connection(fields: ["winnerID"])
  createdAt: AWSDateTime
}

type Round
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID
  status: RoundStatus
  hands: [Hand] @connection(keyName: "byRound", fields: ["id"])
  stacks: [Stack] @connection(keyName: "byRound", fields: ["id"])
  activeStackID: ID
  activeStack: Stack @connection(fields: ["activeStackID"])
  turnSequence: [ID]
  turn: ID
  mode: RoundMode
  betPoints: Int
}

type Game @model @auth(rules: [{ allow: private }]) {
  id: ID!
  private: Boolean
  activeRoundID: ID
  ActiveRound: Round @connection(fields: ["activeRoundID"])
  Rounds: [Round] @connection(keyName: "byGame", fields: ["id"])
  status: GameStatus
  Teams: [Team] @connection(keyName: "byGame", fields: ["id"])
  name: String
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  email: String!
  username: String!
  lastOnline: AWSTimestamp!
  teams: [TeamUser] @connection(keyName: "byUser", fields: ["id"])
}

type TeamUser
  @model(queries: null)
  @key(name: "byTeam", fields: ["teamID", "userID"])
  @key(name: "byUser", fields: ["userID", "teamID"])
  @auth(rules: [{ allow: private }]) {
  id: ID!
  teamID: ID!
  userID: ID!
  team: Team! @connection(fields: ["teamID"])
  user: User! @connection(fields: ["userID"])
}

##########################
# QUERIES
##########################

type Query {
  getUserHand(roundID: String!): Hand!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])
}

##########################
# MUTATIONS
##########################

input CreateNewGameInput {
  name: String
  team1name: String
  team2name: String
  team1color: String
  team2color: String
  private: Boolean
}

input JoinTeamInput {
  userID: String!
  teamID: String!
}

input LeaveGameInput {
  userID: String!
  gameID: String!
}

type Mutation {
  createNewGame(input: CreateNewGameInput): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  joinTeam(input: JoinTeamInput!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  leaveGame(input: LeaveGameInput!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  startGame(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  playCard(roundID: String!, value: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  clearStack(roundID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  newRound(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])
}

type Subscription {
  onUpdateGameState(id: ID!): Game
    @aws_subscribe(
      mutations: [
        "startGame"
        "leaveGame"
        "playCard"
        "clearStack"
        "newRound"
      ]
    )
}
