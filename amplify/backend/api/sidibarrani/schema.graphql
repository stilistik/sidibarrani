##########################
# ENUMS
##########################

enum GameMode {
  DUO
}

enum HandType {
  NORMAL # a hand open only to the owner
  OPEN # a hand open to everyone
  HIDDEN # a hand hidden for everyone
}

enum RoundStatus {
  BET
  PLAY
  ENDED
}

enum GameStatus {
  CREATED
  WAITING
  STARTED
  ENDED
}

enum ActionType {
  PLAY
  BET
  SKIP
}

enum RoundMode {
  TOP_DOWN
  BOTTOM_UP
  SLALOM_BOTTOM
  SLALOM_TOP
  TRUMP_D
  TRUMP_H
  TRUMP_C
  TRUMP_S
}

##########################
# MODELS
##########################

type SequenceNumber @model @auth(rules: [{ allow: private }]) {
  id: ID!
  indexNumber: Int!
}

type Team @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  TeamUsers: [TeamUser] @connection(keyName: "byTeam", fields: ["id"])
}

type Hand
  @model
  @key(name: "byRound", fields: ["roundID", "userID"])
  @key(name: "byUser", fields: ["userID", "roundID"])
  @auth(rules: [{ allow: private }]) {
  id: ID!
  roundID: ID
  userID: ID
  type: HandType
  user: User @connection(fields: ["userID"])
  round: Round @connection(fields: ["roundID"])
  cards: [String] @function(name: "logicore-${env}")
}

type Action
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byStack", fields: ["stackID", "updatedAt"]) {
  id: ID!
  type: ActionType!
  stackID: ID
  userID: ID
  user: User @connection(fields: ["userID"])
  value: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Stack
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byRound", fields: ["roundID", "createdAt"]) {
  id: ID!
  roundID: ID
  size: Int!
  round: Round @connection(fields: ["roundID"])
  actions: [Action] @connection(keyName: "byStack", fields: ["id"])
  winnerID: ID
  winner: TeamUser @connection(fields: ["winnerID"])
  points: Int
  isLastStack: Boolean
  createdAt: AWSDateTime
}

type Round
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID", "createdAt"]) {
  id: ID!
  gameID: ID
  status: RoundStatus
  hands: [Hand] @connection(keyName: "byRound", fields: ["id"])
  stackCount: Int!
  stacks: [Stack] @connection(keyName: "byRound", fields: ["id"])
  activeStackID: ID
  activeStack: Stack @connection(fields: ["activeStackID"])
  turnSequence: [ID]
  turn: ID
  mode: RoundMode
  stake: AWSJSON # { teamID: ID, value: Int}
  result: AWSJSON # Record<teamID, { value: Int, stake_bonus?: Int}>
  winnerID: ID
  winner: Team
  createdAt: AWSDateTime
}

type Game @model @auth(rules: [{ allow: private }]) {
  id: ID!
  index: Int
  mode: GameMode
  public: Boolean
  winCondition: Int
  activeRoundID: ID
  ActiveRound: Round @connection(fields: ["activeRoundID"])
  Rounds: [Round] @connection(keyName: "byGame", fields: ["id"])
  status: GameStatus
  teamAID: ID
  teamBID: ID
  TeamA: Team @connection(fields: ["teamAID"])
  TeamB: Team @connection(fields: ["teamBID"])
  teamAColor: String
  teamBColor: String
  result: AWSJSON # Record<teamID, { value: Int }>
  winnerID: ID
  winner: Team @connection(fields: ["winnerID"])
  messages: [Message] @connection(keyName: "byGame", fields: ["id"])
}

type Message
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID", "createdAt"]) {
  id: ID!
  gameID: ID!
  text: String
  userID: ID
  User: User @connection(fields: ["userID"])
  createdAt: AWSDateTime
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  email: String!
  username: String!
  lastOnline: AWSTimestamp!
  teams: [TeamUser] @connection(keyName: "byUser", fields: ["id"])
}

type TeamUser
  @model(queries: null)
  @key(name: "byTeam", fields: ["teamID", "userID"])
  @key(name: "byUser", fields: ["userID", "teamID"])
  @auth(rules: [{ allow: private }]) {
  id: ID!
  teamID: ID!
  userID: ID!
  team: Team! @connection(fields: ["teamID"])
  user: User! @connection(fields: ["userID"])
}

##########################
# MUTATIONS
##########################

input CreateNewGameInput {
  mode: GameMode
  team1color: String
  team2color: String
  public: Boolean
}

type Mutation {
  createNewGame(input: CreateNewGameInput): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  joinTeam(gameID: String!, teamKey: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  leaveGame(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  startGame(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  playCard(roundID: String!, value: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  clearStack(roundID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  newRound(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  endRound(roundID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  placeBet(roundID: String!, value: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  skipBet(roundID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  createNewMessage(gameID: String!, text: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  clearData: Boolean!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  finishRound(gameID: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])
}

type Subscription {
  onUpdateGameState(id: ID!): Game
    @aws_subscribe(
      mutations: [
        "startGame"
        "leaveGame"
        "playCard"
        "clearStack"
        "newRound"
        "placeBet"
        "skipBet"
        "joinTeam"
        "createNewMessage"
        "endRound"
        "updateGame"
        "finishRound"
      ]
    )
}
