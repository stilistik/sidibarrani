type Team
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID
  name: String
  color: String
  TeamUsers: [TeamUser] @connection(keyName: "byTeam", fields: ["id"])
}

enum RoundStatus {
  DEAL
  BET
  PLAY
}

enum GameStatus {
  CREATED
  STARTED
  ENDED
}

type Round
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID
  status: RoundStatus
}

type Game @model @auth(rules: [{ allow: private }]) {
  id: ID!
  private: Boolean
  Rounds: [Round] @connection(keyName: "byGame", fields: ["id"])
  status: GameStatus
  Teams: [Team] @connection(keyName: "byGame", fields: ["id"])
  name: String
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  email: String!
  username: String!
  lastOnline: AWSTimestamp!
  teams: [TeamUser] @connection(keyName: "byUser", fields: ["id"])
}

type TeamUser
  @model(queries: null)
  @key(name: "byTeam", fields: ["teamID", "userID"])
  @key(name: "byUser", fields: ["userID", "teamID"])
  @auth(rules: [{ allow: private }]) {
  id: ID!
  teamID: ID!
  userID: ID!
  team: Team! @connection(fields: ["teamID"])
  user: User! @connection(fields: ["userID"])
}

input CreateNewGameInput {
  name: String
  team1name: String
  team2name: String
  team1color: String
  team2color: String
  private: Boolean
}

input JoinTeamInput {
  userID: String!
  teamID: String!
}

input LeaveGameInput {
  userID: String!
  gameID: String!
}

type Mutation {
  createNewGame(input: CreateNewGameInput): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  joinTeam(input: JoinTeamInput!): TeamUser!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  leaveGame(input: LeaveGameInput!): Boolean!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])

  startGame(id: String!): Game!
    @function(name: "logicore-${env}")
    @auth(rules: [{ allow: private }])
}
